//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Configs/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""MouseKey"",
            ""id"": ""0c3b2cde-ca52-44e8-8b9c-9eed7efe73b3"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""67dd76f5-2fe3-4f34-ad24-6da91256fbdb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""a8c12f4e-8b64-48de-a3a4-52857fb47633"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""d622a00c-2bea-4def-8a0f-51c8386f7638"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""335e5209-cdb7-42e6-a937-ada8ba194695"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""273e58f2-741d-4e25-9b48-4069a4aec1e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""e58bf9fd-c70c-455d-9bce-bef037238d98"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1582102d-b718-452b-8a00-39f0da9ed158"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5c47488-6bc5-475a-a91d-44b3a79645fb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd46a0e2-0a0c-4f6e-b847-a55e45586aad"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d690b3c5-1a11-4d69-809d-458b24f3dcf9"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09daa219-de97-4913-9868-8ec627761ca1"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1957d6f8-0921-40aa-a3a8-73529255fddd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f9cec146-8e45-44e9-847c-9acdc33c5b8b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5e4d5094-b9a3-4800-a420-0c71b40c0be9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ae127ca5-f2b2-4ad8-b806-1ce2db2dbc10"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""18ae4fe9-4b1b-408b-8b0d-48504913f558"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MouseKey
        m_MouseKey = asset.FindActionMap("MouseKey", throwIfNotFound: true);
        m_MouseKey_Fire = m_MouseKey.FindAction("Fire", throwIfNotFound: true);
        m_MouseKey_Aim = m_MouseKey.FindAction("Aim", throwIfNotFound: true);
        m_MouseKey_MouseDelta = m_MouseKey.FindAction("MouseDelta", throwIfNotFound: true);
        m_MouseKey_Crouch = m_MouseKey.FindAction("Crouch", throwIfNotFound: true);
        m_MouseKey_Sprint = m_MouseKey.FindAction("Sprint", throwIfNotFound: true);
        m_MouseKey_Movement = m_MouseKey.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MouseKey
    private readonly InputActionMap m_MouseKey;
    private IMouseKeyActions m_MouseKeyActionsCallbackInterface;
    private readonly InputAction m_MouseKey_Fire;
    private readonly InputAction m_MouseKey_Aim;
    private readonly InputAction m_MouseKey_MouseDelta;
    private readonly InputAction m_MouseKey_Crouch;
    private readonly InputAction m_MouseKey_Sprint;
    private readonly InputAction m_MouseKey_Movement;
    public struct MouseKeyActions
    {
        private @PlayerInput m_Wrapper;
        public MouseKeyActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_MouseKey_Fire;
        public InputAction @Aim => m_Wrapper.m_MouseKey_Aim;
        public InputAction @MouseDelta => m_Wrapper.m_MouseKey_MouseDelta;
        public InputAction @Crouch => m_Wrapper.m_MouseKey_Crouch;
        public InputAction @Sprint => m_Wrapper.m_MouseKey_Sprint;
        public InputAction @Movement => m_Wrapper.m_MouseKey_Movement;
        public InputActionMap Get() { return m_Wrapper.m_MouseKey; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseKeyActions set) { return set.Get(); }
        public void SetCallbacks(IMouseKeyActions instance)
        {
            if (m_Wrapper.m_MouseKeyActionsCallbackInterface != null)
            {
                @Fire.started -= m_Wrapper.m_MouseKeyActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_MouseKeyActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_MouseKeyActionsCallbackInterface.OnFire;
                @Aim.started -= m_Wrapper.m_MouseKeyActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_MouseKeyActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_MouseKeyActionsCallbackInterface.OnAim;
                @MouseDelta.started -= m_Wrapper.m_MouseKeyActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.performed -= m_Wrapper.m_MouseKeyActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.canceled -= m_Wrapper.m_MouseKeyActionsCallbackInterface.OnMouseDelta;
                @Crouch.started -= m_Wrapper.m_MouseKeyActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_MouseKeyActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_MouseKeyActionsCallbackInterface.OnCrouch;
                @Sprint.started -= m_Wrapper.m_MouseKeyActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_MouseKeyActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_MouseKeyActionsCallbackInterface.OnSprint;
                @Movement.started -= m_Wrapper.m_MouseKeyActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MouseKeyActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MouseKeyActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_MouseKeyActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @MouseDelta.started += instance.OnMouseDelta;
                @MouseDelta.performed += instance.OnMouseDelta;
                @MouseDelta.canceled += instance.OnMouseDelta;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public MouseKeyActions @MouseKey => new MouseKeyActions(this);
    public interface IMouseKeyActions
    {
        void OnFire(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnMouseDelta(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
    }
}
